# SPIRE Agent DaemonSet
# This file defines the Kubernetes DaemonSet for the SPIRE agent.
# The SPIRE agent runs on every node in the cluster and provides workload identity to pods.
#
# Security Considerations:
# 1. Agent must run with non-root user and minimal privileges
# 2. All sensitive data must be mounted as read-only
# 3. Health checks must be properly configured
# 4. Resource limits must be set to prevent DoS
# 5. Cloud provider integration must be properly configured
# 6. Kubelet socket access must be properly secured
# 7. Security context must be properly configured
# 8. Network policies should be configured
# 9. Audit logging should be enabled
# 10. Workload attestation must be properly configured

# Required: Cloud Provider Integration Configuration
# At least one of the following must be configured:
# - GCP: Use GKE Workload Identity. Ensure service account has 'iam.gke.io/gcp-service-account' annotation.
# - AWS: Use IRSA. Ensure service account has 'eks.amazonaws.com/role-arn' annotation. Mount AWS token file if needed.
# - Azure: Use Azure AD Workload Identity. Ensure service account has 'azure.workload.identity/client-id' annotation. Mount Azure token file if needed.
#
# The SPIRE agent configuration is mostly cloud-agnostic, but the way tokens are projected and which environment variables are set may differ by provider.

apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: spire-agent
  namespace: spire
  labels:
    app: spire-agent
spec:
  # Required: Update strategy for the DaemonSet
  # Ensures controlled updates and prevents service disruption
  # Best Practice: Use RollingUpdate with maxUnavailable=1
  # Security Note: Updates should be controlled to prevent service disruption
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1

  selector:
    matchLabels:
      app: spire-agent
  template:
    metadata:
      labels:
        app: spire-agent
    spec:
      # Required: Service account for the SPIRE agent
      # Must have the necessary RBAC permissions
      # Best Practice: Use least privilege principle
      # Security Note: Service account must have minimal required permissions
      serviceAccountName: spire-agent

      # Optional: Grace period for pod termination
      # Default: 30 seconds
      # Best Practice: Set based on average request duration
      # Security Note: Must be long enough for graceful shutdown
      terminationGracePeriodSeconds: 30

      # Required: DNS policy for host network
      # Required for proper host networking and kubelet communication
      # Best Practice: Use ClusterFirstWithHostNet
      # Security Note: Required for proper node identification
      dnsPolicy: ClusterFirstWithHostNet

      containers:
      - name: spire-agent
        # Required: SPIRE agent container image
        # Use a specific version tag for production deployments
        # Best Practice: Use specific version tag, not latest
        # Security Note: Regular security updates are important
        image: ghcr.io/spiffe/spire-agent:1.5.0

        # Optional: Always pull the image
        # Ensures latest security patches are applied
        # Best Practice: Use Always in production for security
        # Security Note: Ensures latest security patches are applied
        imagePullPolicy: Always

        # Required: Command line arguments
        # Points to the agent configuration file
        # Best Practice: Use absolute paths for configuration
        # Security Note: Configuration must be properly secured
        args: ["-config", "/run/spire/config/agent.conf"]

        # Required: Environment variables
        # Sets the node name for agent identification
        # Best Practice: Use fieldRef for dynamic values
        # Security Note: Node name is critical for workload attestation
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        # --- Cloud Provider Example Environment Variables ---
        # GCP: No extra env vars typically needed for agent
        # AWS: If using IRSA, you may want to set AWS_WEB_IDENTITY_TOKEN_FILE
        # - name: AWS_WEB_IDENTITY_TOKEN_FILE
        #   value: "/var/run/secrets/eks.amazonaws.com/serviceaccount/token"
        # Azure: If using Azure AD Workload Identity, you may want to set AZURE_CLIENT_ID
        # - name: AZURE_CLIENT_ID
        #   valueFrom:
        #     secretKeyRef:
        #       name: azure-workload-identity
        #       key: client-id

        # Required: Port configurations
        # Best Practice: Use standard ports
        # Security Note: Ports must be properly secured
        ports:
        - containerPort: 8080  # Required: Health check port
          name: health
        - containerPort: 9091  # Required: Metrics port
          name: metrics

        # Required: Volume mounts
        # Best Practice: Mount sensitive volumes as read-only
        # Security Note: Volumes must be properly secured
        volumeMounts:
        - name: spire-config  # Required: Configuration volume
          mountPath: /run/spire/config
          readOnly: true
        - name: spire-data    # Required: Data volume
          mountPath: /run/spire/data
        - name: spire-secrets # Required: Secrets volume
          mountPath: /run/spire/secrets
          readOnly: true
        - name: spire-sockets # Required: Sockets volume
          mountPath: /run/spire/sockets
        - name: kubelet-socket # Required: Kubelet socket volume
          mountPath: /var/run/kubernetes
          readOnly: true

        # Required: Health probes
        # Best Practice: Use HTTP probe with proper timeout
        # Security Note: Probes must be properly secured
        startupProbe:
          httpGet:
            path: /live
            port: health
          failureThreshold: 30
          periodSeconds: 10

        livenessProbe:
          httpGet:
            path: /live
            port: health
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3

        readinessProbe:
          httpGet:
            path: /ready
            port: health
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3

        # Required: Resource requirements
        # Best Practice: Set based on monitoring data
        # Security Note: Prevents DoS attacks
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 200m
            memory: 256Mi

        # Required: Security context
        # Best Practice: Run as non-root with minimal privileges
        # Security Note: Critical for security
        securityContext:
          runAsUser: 1000
          runAsGroup: 1000
          fsGroup: 1000
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL

      # Required: Volume definitions
      # Best Practice: Use appropriate volume types
      # Security Note: Volumes must be properly secured
      volumes:
      - name: spire-config  # Required: Configuration volume
        configMap:
          name: spire-agent
      - name: spire-data    # Required: Data volume
        emptyDir: {}
      - name: spire-secrets # Required: Secrets volume
        secret:
          secretName: spire-agent-secrets
      - name: spire-sockets # Required: Sockets volume
        hostPath:
          path: /run/spire/sockets
          type: DirectoryOrCreate
      - name: kubelet-socket # Required: Kubelet socket volume
        hostPath:
          path: /var/run/kubernetes
          type: Directory

      # Required: Pod security context
      # Best Practice: Run as non-root with minimal privileges
      # Security Note: Critical for security
      securityContext:
        fsGroup: 1000

      # Optional: Cloud Provider Volumes
      # Best Practice: Configure based on cloud provider
      # Security Note: Token volumes must be properly secured
      # - name: aws-web-identity-token  # Required for AWS IRSA
      #   projected:
      #     sources:
      #     - serviceAccountToken:
      #         audience: "sts.amazonaws.com"
      #         expirationSeconds: 3600
      #         path: "token"
      # - name: azure-identity-token  # Required for Azure AD Workload Identity
      #   projected:
      #     sources:
      #     - serviceAccountToken:
      #         audience: "api://AzureADTokenExchange"
      #         expirationSeconds: 3600
      #         path: "azure-identity-token"
      #
      # GCP: No extra projected token volume typically needed for agent 