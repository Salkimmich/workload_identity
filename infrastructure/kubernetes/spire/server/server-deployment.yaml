# SPIRE Server Deployment
# This file defines the Kubernetes deployment for the SPIRE server.
# The SPIRE server is the central authority for workload identity in the cluster.
#
# Security Considerations:
# 1. Server must run with non-root user and minimal privileges
# 2. All sensitive data must be mounted as read-only
# 3. Health checks must be properly configured
# 4. Resource limits must be set to prevent DoS
# 5. Cloud provider integration must be properly configured
# 6. High availability must be configured for production
# 7. Data persistence must be configured for production
# 8. Security context must be properly configured
# 9. Network policies should be configured
# 10. Audit logging should be enabled

# Required: Cloud Provider Integration Configuration
# At least one of the following must be configured:
# - GCP: Use GKE Workload Identity. Ensure service account has 'iam.gke.io/gcp-service-account' annotation.
# - AWS: Use IRSA. Ensure service account has 'eks.amazonaws.com/role-arn' annotation. Mount AWS token file if needed.
# - Azure: Use Azure AD Workload Identity. Ensure service account has 'azure.workload.identity/client-id' annotation. Mount Azure token file if needed.

apiVersion: apps/v1
kind: Deployment
metadata:
  name: spire-server
  namespace: spire
  labels:
    app: spire-server
spec:
  # Required: Number of server replicas
  # For production, consider running multiple replicas for high availability
  # Optional: Increase replicas to 3 for high availability
  # Rationale: Ensures service availability during node failures or updates
  # Best Practice: Use 3 replicas in production for high availability
  # Security Note: Multiple replicas help prevent single point of failure
  replicas: 1

  # Optional: Limit the number of old ReplicaSets to retain
  # Rationale: Prevents excessive storage usage and simplifies rollback management
  # Default: 10 (adjust based on your rollback needs)
  # Best Practice: Keep this number low to reduce storage usage
  # Security Note: Old ReplicaSets may contain sensitive data
  revisionHistoryLimit: 10

  # Required: Deployment strategy for controlled updates
  # Rationale: Ensures zero-downtime updates and controlled rollback
  # maxUnavailable: Maximum number of pods that can be unavailable during update
  # maxSurge: Maximum number of pods that can be created above desired replicas
  # Best Practice: Use RollingUpdate with maxUnavailable=1 for zero-downtime updates
  # Security Note: Updates should be controlled to prevent service disruption
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1

  selector:
    matchLabels:
      app: spire-server
  template:
    metadata:
      labels:
        app: spire-server
    spec:
      # Required: Service account for the SPIRE server
      # This service account must have the necessary RBAC permissions
      #
      # Cloud-specific notes:
      # - GCP: Service account must be annotated for GKE Workload Identity
      # - AWS: Service account must be annotated for IRSA
      # - Azure: Service account must be annotated for Azure AD Workload Identity
      # Best Practice: Use least privilege principle for service account
      # Security Note: Service account must have minimal required permissions
      serviceAccountName: spire-server

      # Optional: Grace period for pod termination
      # Rationale: Allows time for in-flight requests to complete
      # Default: 30 seconds (adjust based on your workload)
      # Best Practice: Set based on average request duration
      # Security Note: Must be long enough for graceful shutdown
      terminationGracePeriodSeconds: 30

      containers:
      - name: spire-server
        # Required: SPIRE server container image
        # Use a specific version tag for production deployments
        # Best Practice: Use specific version tag, not latest
        # Security Note: Regular security updates are important
        image: ghcr.io/spiffe/spire-server:1.5.0

        # Optional: Always pull the image
        # Rationale: Ensures latest security patches are applied
        # Note: May increase deployment time
        # Best Practice: Use Always in production for security
        # Security Note: Ensures latest security patches are applied
        imagePullPolicy: Always

        # Required: Command line arguments
        # Points to the server configuration file
        # Best Practice: Use absolute paths for configuration
        # Security Note: Configuration must be properly secured
        args: ["-config", "/run/spire/config/server.conf"]

        ports:
        # Required: SPIRE server API port
        # Used for agent-server communication
        # Best Practice: Use standard port 8081
        # Security Note: Port must be properly secured
        - containerPort: 8081
          name: spire-server

        # Required: Health check port
        # Used for liveness and readiness probes
        # Best Practice: Use standard port 8080
        # Security Note: Health checks must be properly secured
        - containerPort: 8080
          name: health

        # Required: Metrics port
        # Used for Prometheus metrics collection
        # Best Practice: Use standard port 9091
        # Security Note: Metrics must be properly secured
        - containerPort: 9091
          name: metrics

        volumeMounts:
        # Required: Configuration volume
        # Mounts the server configuration
        # Best Practice: Mount as read-only
        # Security Note: Configuration must be properly secured
        - name: spire-config
          mountPath: /run/spire/config
          readOnly: true

        # Required: Data volume
        # Stores persistent data like the datastore
        # Optional improvement: Use PersistentVolume for production
        # Rationale: Ensures data persistence across pod restarts
        # Best Practice: Use PersistentVolume in production
        # Security Note: Data must be properly secured
        - name: spire-data
          mountPath: /run/spire/data

        # Required: Secrets volume
        # Mounts sensitive data like keys and certificates
        # Best Practice: Mount as read-only
        # Security Note: Secrets must be properly secured
        - name: spire-secrets
          mountPath: /run/spire/secrets
          readOnly: true

        # Required: Sockets volume
        # Used for Unix domain socket communication
        # Best Practice: Use dedicated volume
        # Security Note: Sockets must be properly secured
        - name: spire-sockets
          mountPath: /run/spire/sockets

        # Required: Startup probe
        # Rationale: Better handling of slow-starting containers
        # Prevents premature restarts during initialization
        # Best Practice: Use HTTP probe with proper timeout
        # Security Note: Probe must be properly secured
        startupProbe:
          httpGet:
            path: /live
            port: health
          failureThreshold: 30
          periodSeconds: 10

        # Required: Liveness probe
        # Ensures the container is running properly
        # Optional improvement: Added timeout and failure threshold
        # Rationale: Better handling of temporary network issues
        # Best Practice: Use HTTP probe with proper timeout
        # Security Note: Probe must be properly secured
        livenessProbe:
          httpGet:
            path: /live
            port: health
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3

        # Required: Readiness probe
        # Ensures the container is ready to handle requests
        # Optional improvement: Added timeout and failure threshold
        # Rationale: Better handling of temporary network issues
        # Best Practice: Use HTTP probe with proper timeout
        # Security Note: Probe must be properly secured
        readinessProbe:
          httpGet:
            path: /ready
            port: health
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3

        # Required: Resource requirements
        # Adjust based on your workload and cluster capacity
        # Optional improvement: Monitor and adjust these values
        # Rationale: Prevents resource starvation and ensures performance
        # Best Practice: Set based on monitoring data
        # Security Note: Prevents DoS attacks
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 200m
            memory: 256Mi

        # Required: Security context
        # Implements security best practices
        # Required: These settings are mandatory for security
        # Best Practice: Run as non-root with minimal privileges
        # Security Note: Critical for security
        securityContext:
          # Run as non-root user
          runAsUser: 1000
          runAsGroup: 1000
          fsGroup: 1000
          # Read-only root filesystem
          readOnlyRootFilesystem: true
          # Prevent privilege escalation
          allowPrivilegeEscalation: false
          # Drop all capabilities
          capabilities:
            drop:
            - ALL

        # --- Cloud Provider Example Environment Variables ---
        # GCP: No extra env vars typically needed for server
        # AWS: If using IRSA, you may want to set AWS_WEB_IDENTITY_TOKEN_FILE
        # - name: AWS_WEB_IDENTITY_TOKEN_FILE
        #   value: "/var/run/secrets/eks.amazonaws.com/serviceaccount/token"
        # Azure: If using Azure AD Workload Identity, you may want to set AZURE_CLIENT_ID
        # - name: AZURE_CLIENT_ID
        #   valueFrom:
        #     secretKeyRef:
        #       name: azure-workload-identity
        #       key: client-id

      volumes:
      # Required: Configuration volume from ConfigMap
      # Best Practice: Use ConfigMap for configuration
      # Security Note: Configuration must be properly secured
      - name: spire-config
        configMap:
          name: spire-server

      # Required: Empty directory for persistent data
      # Optional improvement: Use PersistentVolume for production
      # Rationale: Ensures data persistence across pod restarts
      # Best Practice: Use PersistentVolume in production
      # Security Note: Data must be properly secured
      - name: spire-data
        emptyDir: {}

      # Required: Secrets volume
      # Contains sensitive data like keys and certificates
      # Best Practice: Use Kubernetes secrets
      # Security Note: Secrets must be properly secured
      - name: spire-secrets
        secret:
          secretName: spire-server-secrets

      # Required: Empty directory for Unix domain sockets
      # Best Practice: Use dedicated volume
      # Security Note: Sockets must be properly secured
      - name: spire-sockets
        emptyDir: {}

      # --- Cloud Provider Example Volumes ---
      # AWS: Projected token volume for IRSA
      # - name: aws-web-identity-token
      #   projected:
      #     sources:
      #     - serviceAccountToken:
      #         audience: "sts.amazonaws.com"
      #         expirationSeconds: 3600
      #         path: "token"
      # Azure: Projected token volume for Azure AD Workload Identity
      # - name: azure-identity-token
      #   projected:
      #     sources:
      #     - serviceAccountToken:
      #         audience: "api://AzureADTokenExchange"
      #         expirationSeconds: 3600
      #         path: "azure-identity-token"
      #
      # GCP: No extra projected token volume typically needed for server
      #
      # Required: Pod security context
      # Sets the filesystem group
      # Required: This setting is mandatory for security
      # Best Practice: Run as non-root with minimal privileges
      # Security Note: Critical for security
      securityContext:
        fsGroup: 1000 