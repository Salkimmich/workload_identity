# SPIRE Server Configuration
# This file defines the configuration for the SPIRE server, which is the central authority
# for workload identity in the cluster. It issues and validates SVIDs (SPIFFE Verifiable Identity Documents).
#
# The SPIRE server is responsible for:
# 1. Managing the trust domain and issuing SVIDs
# 2. Validating node and workload attestation
# 3. Maintaining the registration entries database
# 4. Providing the SPIFFE Workload API to agents

apiVersion: v1
kind: ConfigMap
metadata:
  name: spire-server
  namespace: spire
data:
  # Server configuration file
  server.conf: |
    # Server configuration
    server {
      # Bind address for the SPIRE server
      # This should be accessible only within the cluster
      # 0.0.0.0 means listen on all available network interfaces
      bind_address = "0.0.0.0"
      
      # Port for the SPIRE server API
      # This port is used for agent-server communication
      bind_port = "8081"
      
      # Socket path for the SPIRE server API
      # Used by the server to communicate with agents
      # This Unix domain socket enables secure local communication
      socket_path = "/run/spire/sockets/server.sock"
      
      # Trust domain for this SPIRE deployment
      # This should be unique to your organization
      # The trust domain is the root of trust for all identities
      # Format: <organization>.example.org
      trust_domain = "example.org"
      
      # Log level for the server
      # Options: debug, info, warn, error
      # debug: Detailed debugging information
      # info: General operational information
      # warn: Warning messages
      # error: Error messages only
      log_level = "info"
      
      # Log format
      # Options: text, json
      # text: Human-readable format
      # json: Machine-readable format for log aggregation
      log_format = "text"
      
      # Registration entry TTL
      # How long registration entries are valid
      # This socket is used for registration API operations
      registration_uds_path = "/run/spire/sockets/registration.sock"
    }

    # Plugin configurations
    plugins {
      # Node attestation plugin
      # Used to verify the identity of nodes in the cluster
      # k8s_psat: Kubernetes Projected Service Account Token
      # This plugin verifies node identity using Kubernetes service account tokens
      NodeAttestor "k8s_psat" {
        plugin_data {
          # Cluster name for this Kubernetes cluster
          # Must be unique if running multiple clusters
          # Used to identify the source of node attestation
          cluster = "demo-cluster"
        }
      }

      # Key manager plugin
      # Manages the cryptographic keys used by SPIRE
      # memory: In-memory key storage (not persistent)
      # Note: For production, use a persistent key manager like disk or aws_kms
      KeyManager "memory" {
        plugin_data {
          # Key storage configuration
          # In-memory storage is used for demonstration
          # Production should use a persistent storage
          # Options include:
          # - disk: Local file system storage
          # - aws_kms: AWS Key Management Service
          # - gcp_kms: Google Cloud KMS
        }
      }

      # Data store plugin
      # Stores registration entries and other persistent data
      # sql: SQL database backend
      # Note: For production, use a proper database like PostgreSQL
      DataStore "sql" {
        plugin_data {
          # Database configuration
          # Using SQLite for demonstration
          # Production should use a proper database
          # Options include:
          # - sqlite3: Local SQLite database (not recommended for production)
          # - postgres: PostgreSQL database
          # - mysql: MySQL database
          database_type = "sqlite3"
          connection_string = "/run/spire/data/datastore.sqlite3"
        }
      }
    }

    # Telemetry configuration
    # Enables monitoring and metrics collection
    telemetry {
      # Prometheus metrics endpoint
      # Exposes metrics for monitoring SPIRE server health and performance
      Prometheus {
        # Bind address for metrics
        # 0.0.0.0 means listen on all available network interfaces
        bind_address = "0.0.0.0"
        # Port for Prometheus metrics
        # Default Prometheus port is 9090, using 8088 to avoid conflicts
        bind_port = "8088"
      }
    }

    # Health check configuration
    # Enables health monitoring of the SPIRE server
    health_checks {
      # Listener configuration
      # Enables HTTP health check endpoints
      listener_enabled = true
      # Bind address for health checks
      # 0.0.0.0 means listen on all available network interfaces
      bind_address = "0.0.0.0"
      # Port for health check endpoints
      # Standard health check port
      bind_port = "8080"
      # Liveness probe endpoint
      # Returns 200 if server is running
      live_path = "/live"
      # Readiness probe endpoint
      # Returns 200 if server is ready to handle requests
      ready_path = "/ready"
    } 